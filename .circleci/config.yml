version: 2.1

executors:
  docker-publisher:
    environment:
      REGISTRY_NAME: docker.pkg.github.com
      IMAGE_NAME: begrepskatalogen
    docker:
      - image: circleci/buildpack-deps:stretch
  nais-deployer:
    environment:
      TEAM: begrepskatalogen
    docker:
      - image: navikt/deployment-cli:latest

jobs:
  verify:
    executor: docker-publisher
    working_directory: ~/repo
    steps:
      - run:
          name: Verify that docker login works
          command: echo "$GITHUB_PASSWORD" | docker login $REGISTRY_NAME -u "$GITHUB_USERNAME" --password-stdin
      - run:
          name: Creating Github Apps Installation Token
          command: |
            git clone https://github.com/navikt/github-apps-support.git
            export PATH=`pwd`/github-apps-support/bin:$PATH
            echo $GITHUB_PRIVATE_KEY | base64 --decode > ./github.key.pem
            GITHUB_TOKEN=$(generate-installation-token.sh `generate-jwt.sh ./github.key.pem $GITHUB_APP_ID`)
            echo "export GITHUB_TOKEN=$GITHUB_TOKEN" >> $BASH_ENV
            source $BASH_ENV
            echo -e "machine api.github.com login x-access-token password $GITHUB_TOKEN" >> .netrc
      - persist_to_workspace:
          root: .
          paths:
            - ./.netrc
            - ./github.key.pem
  build:
    docker:
      - image: circleci/node:latest
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Unpack variables
          command: cp /tmp/workspace/.netrc ~/.netrc
      - checkout
      - run:
          name: Determin release version
          command: |
            export GIT_COMMIT_HASH=$(git log -n 1 --pretty=format:'%h')
            export GIT_COMMIT_DATE=$(git log -1 --pretty='%ad' --date=format:'%Y%m%d%H%M%S')
            export VERSION=1.0_${GIT_COMMIT_DATE}_${GIT_COMMIT_HASH}
            echo $VERSION > ./VERSION.txt
            echo "export VERSION=$VERSION" >> $BASH_ENV
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Installing npm dependecies
          command: yarn install --ignore-optional --ignore-scripts --no-progress --frozen-lockfile
      - run:
          name: Build project for production
          command: yarn build
      - run:
          name: Running tests
          command: yarn test
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - persist_to_workspace:
          root: .
          paths:
            - ./Dockerfile
            - ./VERSION.txt
            - ./k8s
            - ./dist
            - ./server

  docker-build:
    executor: docker-publisher
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Unpack variables
          command: |
            cp /tmp/workspace/Dockerfile ./Dockerfile
            cp -r /tmp/workspace/server  ./server
            cp -r /tmp/workspace/dist    ./dist
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Test build docker image
          command: |
            export VERSION=$(cat /tmp/workspace/VERSION.txt)
            docker build -t $REGISTRY_NAME/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$IMAGE_NAME:$VERSION .

  docker-publish:
    executor: docker-publisher
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Unpack variables
          command: |
            cp /tmp/workspace/Dockerfile ./Dockerfile
            cp -r /tmp/workspace/server  ./server
            cp -r /tmp/workspace/dist    ./dist
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Publish Docker Image to Github Package registry
          command: |
            export VERSION=$(cat /tmp/workspace/VERSION.txt)
            echo "$GITHUB_PASSWORD" | docker login $REGISTRY_NAME -u "$GITHUB_USERNAME" --password-stdin
            docker build -t $REGISTRY_NAME/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$IMAGE_NAME:$VERSION .
            docker push $REGISTRY_NAME/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$IMAGE_NAME:$VERSION

  deploy-dev:
    executor: nais-deployer
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Create vars.json
          command: echo "{\"ingress\":\"app-q0.adeo.no\"}" > vars.json
      - run:
          name: Create NAIS Github deployment
          command: |
            export VERSION=$(cat /tmp/workspace/VERSION.txt)
            deployment-cli deploy create \
            --cluster=dev-fss \
            --repository=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME \
            --appid=${GITHUB_APP_ID} \
            --team=${TEAM} \
            --version=${VERSION} \
            --vars=vars.json \
            --key=/tmp/workspace/github.key.pem \
            --resource=/tmp/workspace/k8s/app.yaml

  deploy-prod:
    executor: nais-deployer
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Create vars.json
          command: echo "{\"ingress\":\"app.adeo.no\"}" > vars.json
      - run:
          name: Create NAIS Github deployment
          command: |
            export VERSION=$(cat /tmp/workspace/VERSION.txt)
            deployment-cli deploy create \
            --cluster=prod-fss \
            --repository=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME \
            --appid=${GITHUB_APP_ID} \
            --team=${TEAM} \
            --version=${VERSION} \
            --vars=vars.json \
            --key=/tmp/workspace/github.key.pem \
            --resource=/tmp/workspace/k8s/app.yaml

workflows:
  version: 2
  test-and-deploy-pipeline:
    jobs:
      - verify:
          context: familie-ci
      - build:
          context: familie-ci
          requires:
            - verify
      - docker-build:
          context: familie-ci
          requires:
            - build
      - docker-publish:
          context: familie-ci
          requires:
            - docker-build
          filters:
            branches:
              only: master
      - deploy-dev:
          context: familie-ci
          requires:
            - docker-publish
          filters:
            branches:
              only: master
      - deploy-prod:
          context: familie-ci
          requires:
            - deploy-dev
          filters:
            branches:
              only: master
